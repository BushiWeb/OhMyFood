/* Rest link styles to remove underlining and default color */
@mixin link-reset($text-color: inherit) {
    color: $text-color;
    text-decoration: none;
}


/* Dimensions mixins */
/* Remove margins */
@mixin margin-reset {
    margin: 0;
}

/* Set margin-bottom up */
@mixin margin-bottom-only($margin: $m-space) {
    @include margin-reset();
    margin-bottom: $margin;
}

/* Set width and height
   Si $size est donné on a un carré.
   Sinon, on donner les autres valeurs */
@mixin dimensions($width: auto, $height: auto, $size: null) {
    @if $size {
        width: $size;
        height: $size;
    } @else {
        width: $width;
        height: $height;
    }
}

/* Set element width to 100% */
@mixin dimensions-wide($height: auto) {
    @include dimensions($width: 100%, $height: $height);
}


/* Positionning mixin
   $center, $h-center and $v-center allow to automatically center element in the container, on both axis */
@mixin position($type: absolute, $top: auto, $left: auto, $right: auto, $bottom: auto, $h-center: false, $v-center: false, $center: false) {
    position: $type;
    left: $left;
    right: $right;
    top: $top;
    bottom: $bottom;

    @if $center {
        transform: translate(-50%, -50%);
    } @else if $h-center {
        transform: translateX(-50%);
    } @else if $v-center {
        transform: translateY(-50%);
    }
}


/* Remover paddings, margins and bullets for lists */
@mixin list-reset {
    list-style-type: none;
    padding: 0;
    @include margin-reset;
}


/* Style an icon container to be square and rounded, with the icon centerd verticaly and horizontaly */
@mixin centered-icon($size: $s-space, $radius: 50%) {
    @include dimensions($size: $size);
    line-height: $size;
    border-radius: $radius;
    text-align: center;
}


/* Style text */
@mixin text-style($color: inherit, $size: $base-font-size, $weight: normal, $align: left, $family: $text-font-family, $variant: normal, $style: normal) {
    color: $color;
    font-size: $size;
    font-weight: $weight;
    text-align: $align;
    font-family: $family;
    font-variant: $variant;
    font-style: $style;
}
@mixin h2-style($color: inherit, $size: $xl-font-size, $weight: bold, $align: left, $family: $text-font-family, $variant: normal, $style: normal) {
    @include text-style($color, $size, $weight, $align, $family, $variant, $style);
}


/* Create shadows of different intensities */
@mixin shadow($dark: false) {
    @if $dark {
        box-shadow: 0px 2px 8px 2px rgba(0,0,0,0.2), 0px 4px 16px 4px rgba(0,0,0,0.1);
    } @else {
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.1), 0px 12px 24px 0px rgba(0,0,0,0.1);
    }
}


/* Create flex container */
@mixin flexbox($direction: row, $justify-content: flex-start, $align-items: baseline, $align-content: flex-start, $wrap: nowrap, $row-gap: 0, $column-gap: 0) {
    display: flex;
    flex-flow: $direction $wrap;
    justify-content: $justify-content;
    align-items: $align-items;
    align-content: $align-content;
    gap: $row-gap $column-gap;
}


/* Create grid container */
@mixin grid($template-columns: auto, $template-rows: auto, $areas: none, $justify-items: flex-start, $align-items: stretch, $justify-content: flex-start, $align-content: stretch, $column-gap: 0, $row-gap: 0) {
    display: grid;
    grid-template-columns: $template-columns;
    grid-template-rows: $template-rows;
    grid-template-areas: $areas;
    justify-content: $justify-content;
    justify-items: $justify-items;
    align-content: $align-content;
    align-items: $align-items;
    row-gap: $row-gap;
    column-gap: $column-gap;
}

@mixin grid-area($template-columns: auto, $template-rows: auto, $areas: none) {
    grid-template-columns: $template-columns;
    grid-template-rows: $template-rows;
    grid-template-areas: $areas;
}



/* Prevent overflow and add ellipsis */
@mixin ellipsis() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}


/* Mixins to create breakpoints */
@mixin tablet {
    @media (min-width: map.get($breakpoints, "tablet")) {
        @content;
    }
}

@mixin desktop {
    @media (min-width: map.get($breakpoints, "desktop")) {
        @content;
    }
}